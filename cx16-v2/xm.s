;
; File generated by cc65 v 2.19 - Git 39619b629
;
	.fopt		compiler,"cc65 v 2.19 - Git 39619b629"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_memcpy
	.import		_memset
	.import		_ExitProgram
	.export		_InitXM
	.export		_AllocXM
	.export		_IndexExistsForXM
	.export		_GetOrSetXM
	.export		_GetXMAddress
	.export		_GetXMDirectSigned
	.export		_GetXMDirectUnsigned
	.export		_SetXMDirectSigned
	.export		_SetXMDirectUnsigned

; ---------------------------------------------------------------
; void __near__ InitXM (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitXM: near

.segment	"CODE"

	lda     #$01
	sta     $0000
	ldx     #$A0
	dea
	jsr     pushax
	ldx     #$20
	jsr     ___bzero
	lda     #$01
	sta     M0001
	ldx     #$A0
	stz     M0001+2
	stx     M0001+2+1
	ldx     #$04
	stz     M0001+4
	stx     M0001+4+1
	lda     #$08
	sta     M0001+6
	stz     M0001+6+1
	lda     #$03
	sta     M0001+1
	ldx     #$A0
	lda     #$00
	jsr     pushax
	lda     #<(M0001)
	ldx     #>(M0001)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jmp     _memcpy

.segment	"BSS"

M0001:
	.res	8,$00

.endproc

; ---------------------------------------------------------------
; int __near__ AllocXM (unsigned int limit, unsigned int size)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AllocXM: near

.segment	"CODE"

	jsr     pushax
	stz     M0005
	bra     L0008
L0002:	inc     M0005
L0008:	ldy     M0005
	lda     #$01
	ldx     #$00
	jsr     aslaxy
	cmp     (sp)
	txa
	ldy     #$01
	sbc     (sp),y
	bcc     L0002
	ldy     #$05
	jsr     pushwysp
	ldy     M0005
	lda     #$01
	ldx     #$00
	jsr     aslaxy
	jsr     tosumulax
	sta     M0006
	stx     M0006+1
	cmp     #$01
	txa
	sbc     #$20
	bcc     L0005
	ldx     #$00
	lda     #$02
	jsr     _ExitProgram
L0005:	lda     #$00
	sec
	sbc     M0003
	pha
	lda     #$20
	sbc     M0003+1
	tax
	pla
	cmp     M0006
	txa
	sbc     M0006+1
	bcs     L0006
	inc     M0002
	stz     M0003
	stz     M0003+1
L0006:	lda     M0002
	sta     M0004
	lda     M0003
	sta     M0004+2
	lda     M0003+1
	clc
	adc     #$A0
	sta     M0004+2+1
	ldy     #$03
	lda     (sp),y
	sta     M0004+4+1
	dey
	lda     (sp),y
	sta     M0004+4
	dey
	lda     (sp),y
	sta     M0004+6+1
	lda     (sp)
	sta     M0004+6
	lda     M0005
	sta     M0004+1
	jsr     decsp6
	lda     #$00
	ldy     #$04
	sta     (sp),y
	iny
	sta     (sp),y
	lda     M0001
	ldy     #$02
	sta     (sp),y
	iny
	lda     M0001+1
	sta     (sp),y
	lda     #<(M0004)
	sta     (sp)
	ldy     #$01
	lda     #>(M0004)
	sta     (sp),y
	tya
	jsr     _GetOrSetXM
	lda     M0006
	clc
	adc     M0003
	sta     M0003
	lda     M0006+1
	adc     M0003+1
	sta     M0003+1
	lda     M0001+1
	sta     regsave+1
	lda     M0001
	sta     regsave
	inc     M0001
	bne     L0007
	inc     M0001+1
L0007:	lda     regsave
	ldx     regsave+1
	jmp     incsp4

.segment	"DATA"

M0001:
	.word	$0001
M0002:
	.byte	$02

.segment	"BSS"

M0003:
	.res	2,$00
M0004:
	.res	8,$00
M0005:
	.res	1,$00
M0006:
	.res	2,$00

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ IndexExistsForXM (int handle, int index)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_IndexExistsForXM: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	lda     (sp),y
	jsr     boolge
	sta     M0003
	tax
	beq     L0003
	lda     $0000
	sta     M0002
	sty     $0000
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax3
	sta     M0001
	txa
	clc
	adc     #$A0
	sta     M0001+1
	jsr     pushw0sp
	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosultax
	sta     M0003
	lda     M0002
	sta     $0000
L0003:	lda     M0003
	jmp     incsp4

.segment	"BSS"

M0001:
	.res	2,$00
M0002:
	.res	1,$00
M0003:
	.res	1,$00

.endproc

; ---------------------------------------------------------------
; void __near__ GetOrSetXM (int handle, int index, void *data, enum $anon-enum-001E get_or_set)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetOrSetXM: near

.segment	"CODE"

	jsr     pusha
	lda     $0000
	sta     M0004
	lda     #$01
	sta     $0000
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax3
	sta     M0001
	txa
	clc
	adc     #$A0
	sta     M0001+1
	dey
	lda     (sp),y
	tax
	cpx     #$80
	bcs     L000A
	ldy     #$06
	jsr     pushwysp
	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bcc     L0002
L000A:	ldx     #$00
	lda     #$04
	jsr     _ExitProgram
L0002:	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr2
	stx     ptr2+1
	ldy     #$04
	lda     (sp),y
	sta     sreg+1
	dey
	lda     (sp),y
	sta     sreg
	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tay
	lda     sreg
	ldx     sreg+1
	jsr     aslaxy
	clc
	adc     ptr2
	sta     M0002
	txa
	adc     ptr2+1
	sta     M0002+1
	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	sta     M0003+1
	dey
	lda     (ptr1),y
	sta     M0003
	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	lda     (ptr1)
	sta     $0000
	lda     (sp)
	beq     L0007
	cmp     #$01
	beq     L0008
	bra     L000B
L0007:	ldy     #$04
	jsr     pushwysp
	lda     M0002
	ldx     M0002+1
	bra     L000E
L0008:	lda     M0002
	ldx     M0002+1
	jsr     pushax
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
L000E:	jsr     pushax
	lda     M0003
	ldx     M0003+1
	jsr     _memcpy
L000B:	lda     M0004
	sta     $0000
	jmp     incsp7

.segment	"BSS"

M0001:
	.res	2,$00
M0002:
	.res	2,$00
M0003:
	.res	2,$00
M0004:
	.res	1,$00

.endproc

; ---------------------------------------------------------------
; void *__near__ GetXMAddress (int handle, int index)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetXMAddress: near

.segment	"CODE"

	jsr     pushax
	lda     #$01
	sta     $0000
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax3
	sta     M0001
	txa
	clc
	adc     #$A0
	sta     M0001+1
	dey
	lda     (sp),y
	tax
	cpx     #$80
	bcs     L0005
	jsr     pushw0sp
	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bcc     L0002
L0005:	ldx     #$00
	lda     #$04
	jsr     _ExitProgram
L0002:	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr2
	stx     ptr2+1
	dey
	lda     (sp),y
	sta     sreg+1
	lda     (sp)
	sta     sreg
	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tay
	lda     sreg
	ldx     sreg+1
	jsr     aslaxy
	clc
	adc     ptr2
	sta     M0002
	txa
	adc     ptr2+1
	sta     M0002+1
	lda     M0001+1
	sta     ptr1+1
	lda     M0001
	sta     ptr1
	lda     (ptr1)
	sta     $0000
	lda     M0002
	ldx     M0002+1
	jmp     incsp4

.segment	"BSS"

M0001:
	.res	2,$00
M0002:
	.res	2,$00

.endproc

; ---------------------------------------------------------------
; int __near__ GetXMDirectSigned (int handle, int index)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetXMDirectSigned: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp6
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #<(M0001)
	sta     (sp)
	ldy     #$01
	lda     #>(M0001)
	sta     (sp),y
	lda     #$00
	jsr     _GetOrSetXM
	lda     M0001
	ldx     M0001+1
	jmp     incsp4

.segment	"BSS"

M0001:
	.res	2,$00

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetXMDirectUnsigned (int handle, int index)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetXMDirectUnsigned: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp6
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #<(M0001)
	sta     (sp)
	ldy     #$01
	lda     #>(M0001)
	sta     (sp),y
	lda     #$00
	jsr     _GetOrSetXM
	lda     M0001
	ldx     M0001+1
	jmp     incsp4

.segment	"BSS"

M0001:
	.res	2,$00

.endproc

; ---------------------------------------------------------------
; void __near__ SetXMDirectSigned (int handle, int index, int value)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SetXMDirectSigned: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp6
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$06
	bcc     L0002
	inx
L0002:	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	tya
	jsr     _GetOrSetXM
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ SetXMDirectUnsigned (int handle, int index, unsigned int value)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SetXMDirectUnsigned: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp6
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$06
	bcc     L0002
	inx
L0002:	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	tya
	jsr     _GetOrSetXM
	jmp     incsp6

.endproc

