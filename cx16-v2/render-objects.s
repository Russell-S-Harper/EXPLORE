;
; File generated by cc65 v 2.19 - Git 39619b629
;
	.fopt		compiler,"cc65 v 2.19 - Git 39619b629"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_malloc
	.import		_GetXMAddress
	.export		_RenderObjects
	.import		_MultiplyThenDivide
	.import		_DrawLineFromTo16
	.import		_g_arena_data
	.import		_g_vehicles
	.import		_g_display_width
	.import		_g_display_height
	.import		_g_arena_index
	.import		_g_max_arena_vertices
	.import		_g_vehicle_index
	.import		_g_max_vehicle_segments
	.import		_g_max_vehicle_vertices

; ---------------------------------------------------------------
; void __near__ RenderObjects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RenderObjects: near

.segment	"CODE"

	lda     M0001
	ora     M0001+1
	bne     L0002
	lda     _g_max_arena_vertices
	ldx     _g_max_arena_vertices+1
	ina
	bne     L0003
	inx
L0003:	jsr     shlax2
	jsr     _malloc
	sta     M0001
	stx     M0001+1
	ldx     #$00
	lda     #$18
	jsr     _malloc
	sta     M0006
	stx     M0006+1
	lda     _g_display_width+1
	lsr     a
	sta     M0002+1
	lda     _g_display_width
	ror     a
	sta     M0002
	lda     _g_display_height
	ldx     _g_display_height+1
	jsr     mulax3
	jsr     shrax2
	sta     M0003
	stx     M0003+1
	lda     M0002
	ldx     M0002+1
	sec
	sbc     #$1E
	bcs     L0004
	dex
L0004:	sta     M0004
	stx     M0004+1
	lda     _g_display_height
	ldx     _g_display_height+1
	jsr     mulax7
	jsr     shrax3
	sta     M0005
	stx     M0005+1
L0002:	lda     _g_vehicles
	ldx     _g_vehicles+1
	jsr     pushax
	lda     _g_vehicle_index
	ldx     _g_vehicle_index+1
	jsr     pushax
	lda     #$23
	jsr     tosmula0
	jsr     tosaddax
	sta     M001C
	stx     M001C+1
	lda     _g_arena_data
	ldx     _g_arena_data+1
	jsr     pushax
	lda     _g_arena_index
	ldx     _g_arena_index+1
	jsr     _GetXMAddress
	sta     M0007
	stx     M0007+1
	inx
	inx
	sta     M001A
	stx     M001A+1
	ldx     M0007+1
	inx
	inx
	stx     sreg+1
	lda     _g_max_arena_vertices
	ldx     _g_max_arena_vertices+1
	ina
	bne     L0005
	inx
L0005:	jsr     mulax6
	clc
	adc     M0007
	sta     M001B
	txa
	adc     sreg+1
	sta     M001B+1
	lda     M0001+1
	sta     M0014+1
	lda     M0001
	sta     M0014
	ldx     #$80
	stz     M0012
	stx     M0012+1
L0006:	lda     M001A+1
	sta     ptr1+1
	lda     M001A
	sta     ptr1
	ldy     #$05
	lda     (ptr1),y
	jmi     L0007
	lda     M001A+1
	sta     ptr1+1
	lda     M001A
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     pushax
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$12
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	sta     M000C
	stx     M000C+1
	lda     M001A+1
	sta     ptr1+1
	lda     M001A
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$14
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	sta     M000D
	stx     M000D+1
	lda     M001A+1
	sta     ptr1+1
	lda     M001A
	sta     ptr1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$16
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	sta     M000E
	stx     M000E+1
	lda     M000E
	ldx     M000E+1
	cpx     M0012+1
	bne     L0043
	cmp     M0012
	beq     L000C
L0043:	lda     M000E+1
	sta     M0012+1
	lda     M000E
	sta     M0012
	jsr     decsp4
	lda     M000E
	ldy     #$02
	sta     (sp),y
	iny
	lda     M000E+1
	sta     (sp),y
	lda     #$FD
	sta     (sp)
	ldy     #$01
	lda     #$FF
	sta     (sp),y
	ldx     #$00
	lda     #$20
	jsr     _MultiplyThenDivide
	sta     M0013
	txa
	clc
	adc     #$12
	sta     M0013+1
L000C:	lda     M0014
	ldx     M0014+1
	jsr     pushax
	lda     M0002
	ldx     M0002+1
	jsr     pushax
	jsr     decsp4
	lda     M000C
	ldy     #$02
	sta     (sp),y
	iny
	lda     M000C+1
	sta     (sp),y
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$1C
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	lda     M0013
	ldx     M0013+1
	jsr     _MultiplyThenDivide
	jsr     pushax
	jsr     decsp4
	lda     M000D
	ldy     #$02
	sta     (sp),y
	iny
	lda     M000D+1
	sta     (sp),y
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$1A
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	lda     M0013
	ldx     M0013+1
	jsr     _MultiplyThenDivide
	jsr     tossubax
	jsr     asrax4
	jsr     asrax1
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
	lda     M0014
	ldx     M0014+1
	jsr     pushax
	lda     M0003
	ldx     M0003+1
	jsr     pushax
	jsr     decsp4
	lda     M000C
	ldy     #$02
	sta     (sp),y
	iny
	lda     M000C+1
	sta     (sp),y
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$1A
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	lda     M0013
	ldx     M0013+1
	jsr     negax
	jsr     _MultiplyThenDivide
	jsr     pushax
	jsr     decsp4
	lda     M000D
	ldy     #$02
	sta     (sp),y
	iny
	lda     M000D+1
	sta     (sp),y
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$1C
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	lda     M0013
	ldx     M0013+1
	jsr     negax
	jsr     _MultiplyThenDivide
	jsr     tosaddax
	jsr     asrax4
	jsr     asrax1
	jsr     tosaddax
	ldy     #$02
	jsr     staxspidx
	lda     #$06
	clc
	adc     M001A
	sta     M001A
	bcc     L000A
	inc     M001A+1
L000A:	lda     #$04
	clc
	adc     M0014
	sta     M0014
	jcc     L0006
	inc     M0014+1
	jmp     L0006
L0007:	lda     M001B+1
	sta     ptr1+1
	lda     M001B
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     pushax
	lda     M001B+1
	sta     ptr1+1
	lda     M001B
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	jeq     L000E
	lda     M001B+1
	sta     ptr1+1
	lda     M001B
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     aslax2
	clc
	adc     M0001
	sta     M0015
	txa
	adc     M0001+1
	sta     M0015+1
	lda     M001B+1
	sta     ptr1+1
	lda     M001B
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     aslax2
	clc
	adc     M0001
	sta     M0016
	txa
	adc     M0001+1
	sta     M0016+1
	jsr     decsp8
	lda     M0015+1
	sta     ptr1+1
	lda     M0015
	sta     ptr1
	dey
	lda     (ptr1),y
	tax
	lda     (ptr1)
	ldy     #$06
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     M0015+1
	sta     ptr1+1
	lda     M0015
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     M0016+1
	sta     ptr1+1
	lda     M0016
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	iny
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     M0016+1
	sta     ptr1+1
	lda     M0016
	sta     ptr1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp)
	dey
	txa
	sta     (sp),y
	lda     #$0B
	jsr     _DrawLineFromTo16
	lda     #$04
	clc
	adc     M001B
	sta     M001B
	jcc     L0007
	inc     M001B+1
	jmp     L0007
L000E:	stz     M000B
	stz     M000B+1
	stz     M0009
	stz     M0009+1
L0012:	lda     M0009
	cmp     #$18
	lda     M0009+1
	sbc     #$00
	bvc     L0016
	eor     #$80
L0016:	bpl     L0013
	lda     _g_vehicles
	ldx     _g_vehicles+1
	jsr     pushax
	lda     M0009
	ldx     M0009+1
	jsr     pushax
	lda     #$23
	jsr     tosmula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	beq     L0014
	lda     M0006
	clc
	adc     M000B
	sta     ptr1
	lda     M0006+1
	adc     M000B+1
	sta     ptr1+1
	lda     M0009
	sta     (ptr1)
	inc     M000B
	bne     L0014
	inc     M000B+1
L0014:	inc     M0009
	bne     L0012
	inc     M0009+1
	bra     L0012
L0013:	jsr     decsp3
	lda     M0006
	ldy     #$01
	sta     (sp),y
	iny
	lda     M0006+1
	sta     (sp),y
	lda     #$00
	sta     (sp)
	lda     M000B
	sec
	sbc     #$01
	cmp     #$80
	jsr     _SortIndicesByVehicleHeight
	stz     M0009
	stz     M0009+1
	ldx     #$80
	stz     M0012
	stx     M0012+1
L001C:	lda     M0009
	cmp     M000B
	lda     M0009+1
	sbc     M000B+1
	bvc     L003C
	eor     #$80
L003C:	bmi     L0045
	rts
L0045:	lda     _g_vehicles
	ldx     _g_vehicles+1
	jsr     pushax
	lda     M0006
	clc
	adc     M0009
	sta     ptr1
	lda     M0006+1
	adc     M0009+1
	sta     ptr1+1
	lda     (ptr1)
	jsr     pusha0
	lda     #$23
	jsr     tosmula0
	jsr     tosaddax
	sta     M001D
	stx     M001D+1
	cpx     M001C+1
	jne     L0021
	cmp     M001C
	jne     L0021
	stz     M000F
	stz     M000F+1
	stz     M000E
	stz     M000E+1
	stz     M0012
	stz     M0012+1
	ldx     #$12
	stz     M0013
	stx     M0013+1
	lda     #$01
	sta     M0008
	lda     M0002+1
	sta     M0010+1
	lda     M0002
	sta     M0010
	lda     M0003+1
	sta     M0011+1
	lda     M0003
	sta     M0011
	jsr     decsp8
	lda     M0004
	ldy     #$06
	sta     (sp),y
	iny
	lda     M0004+1
	sta     (sp),y
	lda     M0005
	ldy     #$04
	sta     (sp),y
	iny
	lda     M0005+1
	sta     (sp),y
	lda     M001D+1
	sta     ptr1+1
	lda     M001D
	sta     ptr1
	ldy     #$10
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     M0004
	pha
	txa
	adc     M0004+1
	tax
	pla
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     M0005
	sta     (sp)
	ldy     #$01
	lda     M0005+1
	sta     (sp),y
	lda     M001D+1
	sta     ptr1+1
	lda     M001D
	sta     ptr1
	ldy     #$10
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _StatusLineColor
	jsr     _DrawLineFromTo16
	jmp     L0022
L0021:	lda     M001D+1
	sta     ptr1+1
	lda     M001D
	sta     ptr1
	ldy     #$12
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$12
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	sta     M000C
	stx     M000C+1
	lda     M001D+1
	sta     ptr1+1
	lda     M001D
	sta     ptr1
	ldy     #$14
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$14
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	sta     M000D
	stx     M000D+1
	lda     M001D+1
	sta     ptr1+1
	lda     M001D
	sta     ptr1
	ldy     #$16
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$16
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	sta     M000E
	stx     M000E+1
	lda     M001D+1
	sta     ptr1+1
	lda     M001D
	sta     ptr1
	ldy     #$18
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$18
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	sta     M000F
	stx     M000F+1
	lda     M000E
	ldx     M000E+1
	cpx     M0012+1
	bne     L0044
	cmp     M0012
	beq     L0029
L0044:	lda     M000E+1
	sta     M0012+1
	lda     M000E
	sta     M0012
	jsr     decsp4
	lda     M000E
	ldy     #$02
	sta     (sp),y
	iny
	lda     M000E+1
	sta     (sp),y
	lda     #$FD
	sta     (sp)
	ldy     #$01
	lda     #$FF
	sta     (sp),y
	ldx     #$00
	lda     #$20
	jsr     _MultiplyThenDivide
	sta     M0013
	txa
	clc
	adc     #$12
	sta     M0013+1
	lda     M000E
	cmp     #$41
	lda     M000E+1
	sbc     #$FF
	bvc     L0025
	eor     #$80
L0025:	bpl     L0024
	lda     #$08
	bra     L0040
L0024:	lda     M000E
	cmp     #$C0
	lda     M000E+1
	sbc     #$00
	bvs     L0028
	eor     #$80
L0028:	bpl     L0041
	lda     #$0E
	bra     L0040
L0041:	lda     #$01
L0040:	sta     M0008
L0029:	lda     M0002
	ldx     M0002+1
	jsr     pushax
	jsr     decsp4
	lda     M000C
	ldy     #$02
	sta     (sp),y
	iny
	lda     M000C+1
	sta     (sp),y
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$1C
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	lda     M0013
	ldx     M0013+1
	jsr     _MultiplyThenDivide
	jsr     pushax
	jsr     decsp4
	lda     M000D
	ldy     #$02
	sta     (sp),y
	iny
	lda     M000D+1
	sta     (sp),y
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$1A
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	lda     M0013
	ldx     M0013+1
	jsr     _MultiplyThenDivide
	jsr     tossubax
	jsr     asrax4
	jsr     asrax1
	jsr     tosaddax
	sta     M0010
	stx     M0010+1
	lda     M0003
	ldx     M0003+1
	jsr     pushax
	jsr     decsp4
	lda     M000C
	ldy     #$02
	sta     (sp),y
	iny
	lda     M000C+1
	sta     (sp),y
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$1A
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	lda     M0013
	ldx     M0013+1
	jsr     negax
	jsr     _MultiplyThenDivide
	jsr     pushax
	jsr     decsp4
	lda     M000D
	ldy     #$02
	sta     (sp),y
	iny
	lda     M000D+1
	sta     (sp),y
	lda     M001C+1
	sta     ptr1+1
	lda     M001C
	sta     ptr1
	ldy     #$1C
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	lda     M0013
	ldx     M0013+1
	jsr     negax
	jsr     _MultiplyThenDivide
	jsr     tosaddax
	jsr     asrax4
	jsr     asrax1
	jsr     tosaddax
	sta     M0011
	stx     M0011+1
L0022:	stz     M000A
	stz     M000A+1
L002A:	lda     M000A
	cmp     #$02
	lda     M000A+1
	sbc     #$00
	bvc     L002E
	eor     #$80
L002E:	jpl     L001E
	lda     M001D
	ldx     M001D+1
	clc
	adc     #$1D
	bcc     L0031
	inx
L0031:	sta     ptr1
	stx     ptr1+1
	lda     M000A
	ldx     M000A+1
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	pha
	lda     tmp1
	adc     ptr1+1
	tax
	pla
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldy     #$01
	ora     (ptr1),y
	jeq     L002C
	lda     M001D
	ldx     M001D+1
	clc
	adc     #$1D
	bcc     L0032
	inx
L0032:	sta     ptr1
	stx     ptr1+1
	lda     M000A
	ldx     M000A+1
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	sta     ptr1
	lda     tmp1
	adc     ptr1+1
	sta     ptr1+1
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     pushax
	ldx     #$00
	txa
	jsr     _GetXMAddress
	sta     M0007
	stx     M0007+1
	sta     M001B
	stx     M001B+1
	lda     _g_max_vehicle_segments
	ldx     _g_max_vehicle_segments+1
	ina
	bne     L0033
	inx
L0033:	jsr     shlax2
	clc
	adc     M0007
	pha
	txa
	adc     M0007+1
	tax
	pla
	jsr     pushax
	lda     M000E
	pha
	lda     M000E+1
	clc
	adc     #$40
	tax
	pla
	jsr     asrax4
	jsr     asrax3
	and     #$E0
	sta     ptr1
	lda     M000F
	ldx     M000F+1
	jsr     asrax4
	ldx     #$00
	and     #$1F
	clc
	adc     ptr1
	bcc     L003F
	inx
L003F:	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     pushax
	lda     _g_max_vehicle_vertices
	ldx     _g_max_vehicle_vertices+1
	jsr     tosumulax
	jsr     tosaddax
	sta     M0017
	stx     M0017+1
L0034:	lda     M001B+1
	sta     ptr1+1
	lda     M001B
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     (ptr1)
	jsr     pushax
	lda     M001B+1
	sta     ptr1+1
	lda     M001B
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	jeq     L002C
	lda     M001B+1
	sta     ptr1+1
	lda     M001B
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	sta     tmp1
	lda     (ptr1)
	asl     a
	rol     tmp1
	clc
	adc     M0017
	sta     M0018
	lda     tmp1
	adc     M0017+1
	sta     M0018+1
	lda     M001B+1
	sta     ptr1+1
	lda     M001B
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	sta     tmp1
	dey
	lda     (ptr1),y
	asl     a
	rol     tmp1
	clc
	adc     M0017
	sta     M0019
	lda     tmp1
	adc     M0017+1
	sta     M0019+1
	jsr     decsp8
	lda     M0018
	ldx     M0018+1
	ldy     #$00
	jsr     ldaidx
	clc
	adc     M0010
	pha
	txa
	adc     M0010+1
	tax
	pla
	ldy     #$06
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     M0018
	ldx     M0018+1
	ldy     #$01
	jsr     ldaidx
	clc
	adc     M0011
	pha
	txa
	adc     M0011+1
	tax
	pla
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     M0019
	ldx     M0019+1
	ldy     #$00
	jsr     ldaidx
	clc
	adc     M0010
	pha
	txa
	adc     M0010+1
	tax
	pla
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     M0019
	ldx     M0019+1
	ldy     #$01
	jsr     ldaidx
	clc
	adc     M0011
	pha
	txa
	adc     M0011+1
	tax
	pla
	sta     (sp)
	ldy     #$01
	txa
	sta     (sp),y
	lda     M001D
	ldx     M001D+1
	ldy     #$08
	jsr     ldaidx
	beq     L0039
	lda     #$07
	bra     L0042
L0039:	lda     M0008
L0042:	jsr     _DrawLineFromTo16
	lda     #$04
	clc
	adc     M001B
	sta     M001B
	jcc     L0034
	inc     M001B+1
	jmp     L0034
L002C:	inc     M000A
	jne     L002A
	inc     M000A+1
	jmp     L002A
L001E:	inc     M0009
	jne     L001C
	inc     M0009+1
	jmp     L001C

.segment	"DATA"

M0001:
	.word	$0000

.segment	"BSS"

M0002:
	.res	2,$00
M0003:
	.res	2,$00
M0004:
	.res	2,$00
M0005:
	.res	2,$00
M0006:
	.res	2,$00
M0007:
	.res	2,$00
M0008:
	.res	1,$00
M0009:
	.res	2,$00
M000A:
	.res	2,$00
M000B:
	.res	2,$00
M000C:
	.res	2,$00
M000D:
	.res	2,$00
M000E:
	.res	2,$00
M000F:
	.res	2,$00
M0010:
	.res	2,$00
M0011:
	.res	2,$00
M0012:
	.res	2,$00
M0013:
	.res	2,$00
M0014:
	.res	2,$00
M0015:
	.res	2,$00
M0016:
	.res	2,$00
M0017:
	.res	2,$00
M0018:
	.res	2,$00
M0019:
	.res	2,$00
M001A:
	.res	2,$00
M001B:
	.res	2,$00
M001C:
	.res	2,$00
M001D:
	.res	2,$00

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ StatusLineColor (int health)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StatusLineColor: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	cmp     #$0F
	txa
	sbc     #$00
	bvc     L0003
	eor     #$80
L0003:	bpl     L0002
	ldx     #$00
	lda     #$02
	jmp     incsp2
L0002:	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	cmp     #$1E
	txa
	sbc     #$00
	bvc     L0005
	eor     #$80
L0005:	asl     a
	ldx     #$00
	bcc     L0007
	lda     #$07
	jmp     incsp2
L0007:	lda     #$05
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ SortIndicesByVehicleHeight (unsigned char *indices, signed char lo, signed char hi)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SortIndicesByVehicleHeight: near

.segment	"CODE"

	jsr     pusha
	jmp     L0041
L0002:	ldy     #$01
	lda     (sp),y
	ina
	cmp     #$80
	sta     M0002
	lda     (sp)
	sta     M0003
	jmp     L002D
L000B:	lda     _g_vehicles
	ldx     _g_vehicles+1
	jsr     pushax
	ldx     #$00
	ldy     #$03
	lda     (sp),y
	bpl     L0010
	dex
L0010:	clc
	iny
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	jsr     pusha0
	lda     #$23
	jsr     tosmula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$16
	lda     (ptr1),y
	sta     M0004+1
	dey
	lda     (ptr1),y
	sta     M0004
	bra     L001A
L0050:	inc     M0002
	bpl     L0051
L001A:	ldx     #$00
L0051:	lda     M0002
	bpl     L0014
	dex
L0014:	jsr     pushax
	ldx     #$00
	lda     M0003
	bpl     L0015
	dex
L0015:	jsr     tosicmp
	beq     L004C
	bpl     L0016
L004C:	lda     M0004
	ldx     M0004+1
	jsr     pushax
	lda     _g_vehicles
	ldx     _g_vehicles+1
	jsr     pushax
	ldx     #$00
	lda     M0002
	bpl     L0017
	dex
L0017:	clc
	ldy     #$06
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	jsr     pusha0
	lda     #$23
	jsr     tosmula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$16
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bpl     L0018
L0016:	ldx     #$00
	bra     L0053
L0018:	ldx     #$00
	bra     L0050
L0052:	dec     M0003
L0053:	lda     M0002
	bpl     L001E
	dex
L001E:	jsr     pushax
	ldx     #$00
	lda     M0003
	bpl     L001F
	dex
L001F:	jsr     tosicmp
	beq     L004D
	bpl     L0020
L004D:	lda     M0004
	ldx     M0004+1
	jsr     pushax
	lda     _g_vehicles
	ldx     _g_vehicles+1
	jsr     pushax
	ldx     #$00
	lda     M0003
	bpl     L0021
	dex
L0021:	clc
	ldy     #$06
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	jsr     pusha0
	lda     #$23
	jsr     tosmula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$16
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bmi     L0022
L0020:	ldx     #$00
	bra     L0054
L0022:	ldx     #$00
	bra     L0052
L0054:	lda     M0002
	bpl     L0026
	dex
L0026:	jsr     pushax
	ldx     #$00
	lda     M0003
	bpl     L0027
	dex
L0027:	jsr     tosicmp
	beq     L004E
	bpl     L002D
L004E:	ldx     #$00
	lda     M0002
	bpl     L0028
	dex
L0028:	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	sta     M0001
	ldx     #$00
	lda     M0002
	bpl     L0029
	dex
L0029:	clc
	dey
	adc     (sp),y
	sta     sreg
	txa
	iny
	adc     (sp),y
	sta     sreg+1
	ldx     #$00
	lda     M0003
	bpl     L002A
	dex
L002A:	clc
	dey
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	sta     (sreg)
	ldx     #$00
	lda     M0003
	bpl     L002B
	dex
L002B:	clc
	dey
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     M0001
	sta     (ptr1)
	ldx     #$00
	inc     M0002
	dec     M0003
	bpl     L0056
L002D:	ldx     #$00
L0056:	lda     M0002
	bpl     L000E
	dex
L000E:	jsr     pushax
	ldx     #$00
	lda     M0003
	bpl     L000F
	dex
L000F:	jsr     tosicmp
	jmi     L000B
	jeq     L000B
	ldx     #$00
	lda     M0003
	bpl     L002F
	dex
L002F:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	bpl     L0030
	dex
L0030:	jsr     tosicmp
	beq     L002E
	ldx     #$00
	lda     M0003
	bpl     L0031
	dex
L0031:	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	sta     M0001
	ldx     #$00
	lda     M0003
	bpl     L0032
	dex
L0032:	clc
	dey
	adc     (sp),y
	sta     sreg
	txa
	iny
	adc     (sp),y
	sta     sreg+1
	ldx     #$00
	ldy     #$01
	lda     (sp),y
	bpl     L0033
	dex
L0033:	clc
	iny
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	sta     (sreg)
	ldx     #$00
	ldy     #$01
	lda     (sp),y
	bpl     L0034
	dex
L0034:	clc
	iny
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     M0001
	sta     (ptr1)
L002E:	ldx     #$00
	lda     M0003
	bpl     L0036
	dex
L0036:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	bpl     L0037
	dex
L0037:	jsr     tossubax
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	bpl     L0038
	dex
L0038:	jsr     pushax
	ldx     #$00
	lda     M0003
	bpl     L0039
	dex
L0039:	jsr     tossubax
	jsr     tosicmp
	bmi     L0035
	beq     L0035
	jsr     decsp3
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     M0003
	ina
	cmp     #$80
	sta     (sp)
	iny
	lda     (sp),y
	jsr     _SortIndicesByVehicleHeight
	lda     M0003
	sec
	sbc     #$01
	cmp     #$80
	ldy     #$00
	bra     L004B
L0035:	jsr     decsp3
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	sta     (sp)
	lda     M0003
	sec
	sbc     #$01
	cmp     #$80
	jsr     _SortIndicesByVehicleHeight
	lda     M0003
	ina
	cmp     #$80
	ldy     #$01
L004B:	sta     (sp),y
L0041:	ldx     #$00
	lda     (sp)
	bpl     L0005
	dex
L0005:	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	bpl     L0006
	dex
L0006:	jsr     tosicmp
	beq     L004F
	jpl     L0002
L004F:	jmp     incsp4

.segment	"BSS"

M0001:
	.res	1,$00
M0002:
	.res	1,$00
M0003:
	.res	1,$00
M0004:
	.res	2,$00

.endproc

